// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package metax

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson976acb3fDecodeWvhAttQvainMetax(in *jlexer.Lexer, out *PaginatedResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "next":
			out.Next = string(in.String())
		case "previous":
			out.Previous = string(in.String())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]*MetaxRecord, 0, 8)
					} else {
						out.Results = []*MetaxRecord{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *MetaxRecord
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(MetaxRecord)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Results = append(out.Results, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson976acb3fEncodeWvhAttQvainMetax(out *jwriter.Writer, in PaginatedResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"next\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Next))
	}
	{
		const prefix string = ",\"previous\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Previous))
	}
	{
		const prefix string = ",\"results\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Results {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaginatedResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson976acb3fEncodeWvhAttQvainMetax(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaginatedResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson976acb3fEncodeWvhAttQvainMetax(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaginatedResponse) UnmarshalJSON_EJ(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson976acb3fDecodeWvhAttQvainMetax(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaginatedResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson976acb3fDecodeWvhAttQvainMetax(l, v)
}
func easyjson976acb3fDecodeWvhAttQvainMetax1(in *jlexer.Lexer, out *MetaxService) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson976acb3fEncodeWvhAttQvainMetax1(out *jwriter.Writer, in MetaxService) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetaxService) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson976acb3fEncodeWvhAttQvainMetax1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetaxService) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson976acb3fEncodeWvhAttQvainMetax1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetaxService) UnmarshalJSON_EJ(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson976acb3fDecodeWvhAttQvainMetax1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetaxService) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson976acb3fDecodeWvhAttQvainMetax1(l, v)
}
func easyjson976acb3fDecodeWvhAttQvainMetax2(in *jlexer.Lexer, out *MetaxRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "created_by_user_id":
			if in.IsNull() {
				in.Skip()
				out.CreatedByUserId = nil
			} else {
				if out.CreatedByUserId == nil {
					out.CreatedByUserId = new(string)
				}
				*out.CreatedByUserId = string(in.String())
			}
		case "created_by_api":
			if in.IsNull() {
				in.Skip()
				out.CreatedByApi = nil
			} else {
				if out.CreatedByApi == nil {
					out.CreatedByApi = new(string)
				}
				*out.CreatedByApi = string(in.String())
			}
		case "modified_by_user_id":
			if in.IsNull() {
				in.Skip()
				out.ModifiedByUserId = nil
			} else {
				if out.ModifiedByUserId == nil {
					out.ModifiedByUserId = new(string)
				}
				*out.ModifiedByUserId = string(in.String())
			}
		case "modified_by_api":
			if in.IsNull() {
				in.Skip()
				out.ModifiedByApi = nil
			} else {
				if out.ModifiedByApi == nil {
					out.ModifiedByApi = new(string)
				}
				*out.ModifiedByApi = string(in.String())
			}
		case "editor":
			if in.IsNull() {
				in.Skip()
				out.Editor = nil
			} else {
				if out.Editor == nil {
					out.Editor = new(Editor)
				}
				(*out.Editor).UnmarshalEasyJSON(in)
			}
		case "research_dataset":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ResearchDataset).UnmarshalJSON(data))
			}
		case "contract":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Contract).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson976acb3fEncodeWvhAttQvainMetax2(out *jwriter.Writer, in MetaxRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"created_by_user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CreatedByUserId == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.CreatedByUserId))
		}
	}
	{
		const prefix string = ",\"created_by_api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CreatedByApi == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.CreatedByApi))
		}
	}
	{
		const prefix string = ",\"modified_by_user_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ModifiedByUserId == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ModifiedByUserId))
		}
	}
	{
		const prefix string = ",\"modified_by_api\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ModifiedByApi == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ModifiedByApi))
		}
	}
	{
		const prefix string = ",\"editor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Editor == nil {
			out.RawString("null")
		} else {
			(*in.Editor).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"research_dataset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ResearchDataset).MarshalJSON())
	}
	{
		const prefix string = ",\"contract\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Contract).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetaxRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson976acb3fEncodeWvhAttQvainMetax2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetaxRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson976acb3fEncodeWvhAttQvainMetax2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetaxRecord) UnmarshalJSON_EJ(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson976acb3fDecodeWvhAttQvainMetax2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetaxRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson976acb3fDecodeWvhAttQvainMetax2(l, v)
}
func easyjson976acb3fDecodeWvhAttQvainMetax3(in *jlexer.Lexer, out *Editor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			if in.IsNull() {
				in.Skip()
				out.OwnerId = nil
			} else {
				if out.OwnerId == nil {
					out.OwnerId = new(string)
				}
				*out.OwnerId = string(in.String())
			}
		case "creator_id":
			if in.IsNull() {
				in.Skip()
				out.CreatorId = nil
			} else {
				if out.CreatorId == nil {
					out.CreatorId = new(string)
				}
				*out.CreatorId = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson976acb3fEncodeWvhAttQvainMetax3(out *jwriter.Writer, in Editor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.OwnerId == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.OwnerId))
		}
	}
	{
		const prefix string = ",\"creator_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CreatorId == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.CreatorId))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Editor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson976acb3fEncodeWvhAttQvainMetax3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Editor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson976acb3fEncodeWvhAttQvainMetax3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Editor) UnmarshalJSON_EJ(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson976acb3fDecodeWvhAttQvainMetax3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Editor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson976acb3fDecodeWvhAttQvainMetax3(l, v)
}
