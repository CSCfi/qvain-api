HTTP/2 500 
server: nginx/1.12.2
date: Thu, 07 Jun 2018 13:46:42 GMT
content-type: text/html
content-length: 134053
x-frame-options: DENY
vary: Cookie
x-content-type-options: nosniff
x-xss-protection: 1; mode=block
strict-transport-security: max-age=31536000; includeSubDomains

<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>UnsupportedMediaType
          at /rest/datasets</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; background-color:#fff; color:#000; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h2 span { font-size:80%; color:#666; font-weight:normal; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.frame { padding-bottom:1em; color:#666; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands { margin-left: 40px; }
    div.commands a { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size:.7em;}
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
  </style>
  
  <script type="text/javascript">
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(document.querySelectorAll('table.vars'));
      hideAll(document.querySelectorAll('ol.pre-context'));
      hideAll(document.querySelectorAll('ol.post-context'));
      hideAll(document.querySelectorAll('div.pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.textContent = s.textContent == uarr ? darr : uarr;
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.textContent = link.textContent.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
  </script>
  
</head>
<body>
<div id="summary">
  <h1>UnsupportedMediaType
       at /rest/datasets</h1>
  <pre class="exception_value">Unsupported media type &quot;application/x-www-form-urlencoded&quot; in request.</pre>
  <table class="meta">

    <tr>
      <th>Request Method:</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>https://metax-test.csc.fi/rest/datasets</td>
    </tr>

    <tr>
      <th>Django Version:</th>
      <td>2.0</td>
    </tr>

    <tr>
      <th>Exception Type:</th>
      <td>UnsupportedMediaType</td>
    </tr>


    <tr>
      <th>Exception Value:</th>
      <td><pre>Unsupported media type &quot;application/x-www-form-urlencoded&quot; in request.</pre></td>
    </tr>


    <tr>
      <th>Exception Location:</th>
      <td>/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py in _parse, line 346</td>
    </tr>

    <tr>
      <th>Python Executable:</th>
      <td>/usr/local/metax/pyenv/bin/python3</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>3.6.3</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>[&#39;/usr/local/metax/metax-api/src&#39;,
 &#39;/usr/local/metax/pyenv/bin&#39;,
 &#39;/opt/rh/rh-python36/root/usr/lib64/python36.zip&#39;,
 &#39;/opt/rh/rh-python36/root/usr/lib64/python3.6&#39;,
 &#39;/opt/rh/rh-python36/root/usr/lib64/python3.6/lib-dynload&#39;,
 &#39;/usr/local/metax/pyenv/lib64/python3.6/site-packages&#39;,
 &#39;/usr/local/metax/pyenv/lib/python3.6/site-packages&#39;]</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>Thu, 7 Jun 2018 16:46:42 +0300</td>
    </tr>
  </table>
</div>




<div id="traceback">
  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">
    Switch to copy-and-paste view</a></span>
  </h2>
  <div id="browserTraceback">
    <ul class="traceback">
      
        
        <li class="frame user">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c139816659565192">
              
                <ol start="473" class="pre-context" id="pre139816659565192">
                
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>            # Get the appropriate handler method</pre></li>
                
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>            if request.method.lower() in self.http_method_names:</pre></li>
                
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>                handler = getattr(self, request.method.lower(),</pre></li>
                
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre></pre></li>
                
                </ol>
              
              <ol start="480" class="context-line">
                <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>            response = handler(request, *args, **kwargs)</pre> <span>...</span></li>
              </ol>
              
                <ol start='481' class="post-context" id="post139816659565192">
                  
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>            response = self.handle_exception(exc)</pre></li>
                  
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre139816659565192', 'post139816659565192')"><pre>        return self.response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659565192')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659565192">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method DatasetViewSet.create of &lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/metax-api/src/metax_api/api/rest/base/views/dataset_view.py</code> in <code>create</code>

          
            <div class="context" id="c139816659566344">
              
                <ol start="141" class="pre-context" id="pre139816659566344">
                
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>            removed_object = self._get_removed_dataset()</pre></li>
                
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>            rabbitmq = RabbitMQ()</pre></li>
                
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>            rabbitmq.publish({ &#39;identifier&#39;: removed_object.identifier },</pre></li>
                
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>                routing_key=&#39;delete&#39;, exchange=&#39;datasets&#39;)</pre></li>
                
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>        return res</pre></li>
                
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>    def create(self, request, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="148" class="context-line">
                <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>        res = super(DatasetViewSet, self).create(request, *args, **kwargs)</pre> <span>...</span></li>
              </ol>
              
                <ol start='149' class="post-context" id="post139816659566344">
                  
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>        if res.status_code == status.HTTP_201_CREATED:</pre></li>
                  
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>            if &#39;success&#39; in res.data:</pre></li>
                  
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>                # was bulk create</pre></li>
                  
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>                message = [ r[&#39;object&#39;] for r in res.data[&#39;success&#39;] ]</pre></li>
                  
                  <li onclick="toggle('pre139816659566344', 'post139816659566344')"><pre>            else:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659566344')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659566344">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>__class__</td>
                    <td class="code"><pre>&lt;class &#39;metax_api.api.rest.base.views.dataset_view.DatasetViewSet&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/metax-api/src/metax_api/api/rest/base/views/common_view.py</code> in <code>create</code>

          
            <div class="context" id="c139816659566472">
              
                <ol start="181" class="pre-context" id="pre139816659566472">
                
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>        response = Response(results, status=http_status)</pre></li>
                
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>        self._check_and_store_bulk_error(request, response)</pre></li>
                
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>        return response</pre></li>
                
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>    def create(self, request, *args, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>        serializer_class = self.get_serializer_class()</pre></li>
                
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>        kwargs[&#39;context&#39;] = self.get_serializer_context()</pre></li>
                
                </ol>
              
              <ol start="188" class="context-line">
                <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>        results, http_status = self.create_bulk_method(request, serializer_class, **kwargs)</pre> <span>...</span></li>
              </ol>
              
                <ol start='189' class="post-context" id="post139816659566472">
                  
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>        response = Response(results, status=http_status)</pre></li>
                  
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>        self._check_and_store_bulk_error(request, response)</pre></li>
                  
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>    def destroy(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre139816659566472', 'post139816659566472')"><pre>        CS.update_common_info(request)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659566472')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659566472">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;context&#39;: {&#39;format&#39;: None,
             &#39;request&#39;: &lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;,
             &#39;view&#39;: &lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;}}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer_class</td>
                    <td class="code"><pre>&lt;class &#39;metax_api.api.rest.base.serializers.catalog_record_serializer.CatalogRecordSerializer&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/metax-api/src/metax_api/services/common_service.py</code> in <code>create_bulk</code>

          
            <div class="context" id="c139816659566152">
              
                <ol start="55" class="pre-context" id="pre139816659566152">
                
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre>        request: the http request object</pre></li>
                
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre>        serializer_class: does the actual saving, knows what kind of object is in question</pre></li>
                
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre>        common_info = cls.update_common_info(request, return_only=True)</pre></li>
                
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre>        results = None</pre></li>
                
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre></pre></li>
                
                </ol>
              
              <ol start="62" class="context-line">
                <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre>        if isinstance(request.data, list):</pre> <span>...</span></li>
              </ol>
              
                <ol start='63' class="post-context" id="post139816659566152">
                  
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre>            if len(request.data) == 0:</pre></li>
                  
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre>                raise ValidationError([&#39;the received object list is empty&#39;])</pre></li>
                  
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre>            # dont fail the entire request if only some inserts fail.</pre></li>
                  
                  <li onclick="toggle('pre139816659566152', 'post139816659566152')"><pre>            # successfully created rows are added to &#39;successful&#39;, and</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659566152')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659566152">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;metax_api.services.common_service.CommonService&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>common_info</td>
                    <td class="code"><pre>{&#39;date_created&#39;: datetime.datetime(2018, 6, 7, 13, 46, 42, tzinfo=&lt;UTC&gt;),
 &#39;service_created&#39;: &#39;qvain&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;context&#39;: {&#39;format&#39;: None,
             &#39;request&#39;: &lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;,
             &#39;view&#39;: &lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;}}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>results</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer_class</td>
                    <td class="code"><pre>&lt;class &#39;metax_api.api.rest.base.serializers.catalog_record_serializer.CatalogRecordSerializer&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py</code> in <code>data</code>

          
            <div class="context" id="c139816659566408">
              
                <ol start="204" class="pre-context" id="pre139816659566408">
                
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>        More semantically correct name for request.GET.</pre></li>
                
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>        return self._request.GET</pre></li>
                
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>    @property</pre></li>
                
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>    def data(self):</pre></li>
                
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>        if not _hasattr(self, &#39;_full_data&#39;):</pre></li>
                
                </ol>
              
              <ol start="211" class="context-line">
                <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>            self._load_data_and_files()</pre> <span>...</span></li>
              </ol>
              
                <ol start='212' class="post-context" id="post139816659566408">
                  
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>        return self._full_data</pre></li>
                  
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>    @property</pre></li>
                  
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>    def user(self):</pre></li>
                  
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre139816659566408', 'post139816659566408')"><pre>        Returns the user associated with the current request, as authenticated</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659566408')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659566408">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py</code> in <code>_load_data_and_files</code>

          
            <div class="context" id="c139816659564232">
              
                <ol start="267" class="pre-context" id="pre139816659564232">
                
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>        return self._authenticator</pre></li>
                
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>    def _load_data_and_files(self):</pre></li>
                
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>        Parses the request content into `self.data`.</pre></li>
                
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>        if not _hasattr(self, &#39;_data&#39;):</pre></li>
                
                </ol>
              
              <ol start="274" class="context-line">
                <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>            self._data, self._files = self._parse()</pre> <span>...</span></li>
              </ol>
              
                <ol start='275' class="post-context" id="post139816659564232">
                  
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>            if self._files:</pre></li>
                  
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>                self._full_data = self._data.copy()</pre></li>
                  
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>                self._full_data.update(self._files)</pre></li>
                  
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>            else:</pre></li>
                  
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre>                self._full_data = self._data</pre></li>
                  
                  <li onclick="toggle('pre139816659564232', 'post139816659564232')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659564232')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659564232">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py</code> in <code>_parse</code>

          
            <div class="context" id="c139816661223944">
              
                <ol start="339" class="pre-context" id="pre139816661223944">
                
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>                empty_data = {}</pre></li>
                
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>            empty_files = MultiValueDict()</pre></li>
                
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>            return (empty_data, empty_files)</pre></li>
                
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>        parser = self.negotiator.select_parser(self, self.parsers)</pre></li>
                
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>        if not parser:</pre></li>
                
                </ol>
              
              <ol start="346" class="context-line">
                <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>            raise exceptions.UnsupportedMediaType(media_type)</pre> <span>...</span></li>
              </ol>
              
                <ol start='347' class="post-context" id="post139816661223944">
                  
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>            parsed = parser.parse(stream, media_type, self.parser_context)</pre></li>
                  
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>        except Exception:</pre></li>
                  
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>            # If we get an exception during parsing, fill in empty data and</pre></li>
                  
                  <li onclick="toggle('pre139816661223944', 'post139816661223944')"><pre>            # re-raise.  Ensures we don&#39;t simply repeat the error when</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816661223944')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816661223944">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>media_type</td>
                    <td class="code"><pre>&#39;application/x-www-form-urlencoded&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>parser</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>stream</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/rest/datasets&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
          <li><h3>
          
            During handling of the above exception (Unsupported media type &quot;application/x-www-form-urlencoded&quot; in request.), another exception occurred:
          
        </h3></li>
        
        <li class="frame django">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/django/core/handlers/exception.py</code> in <code>inner</code>

          
            <div class="context" id="c139816659955080">
              
                <ol start="28" class="pre-context" id="pre139816659955080">
                
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>    This decorator is automatically applied to all middleware to ensure that</pre></li>
                
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>    no middleware leaks an exception and that the next middleware in the stack</pre></li>
                
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>    can rely on getting a response instead of an exception.</pre></li>
                
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>    @wraps(get_response)</pre></li>
                
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>    def inner(request):</pre></li>
                
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="35" class="context-line">
                <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>            response = get_response(request)</pre> <span>...</span></li>
              </ol>
              
                <ol start='36' class="post-context" id="post139816659955080">
                  
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>            response = response_for_exception(request, exc)</pre></li>
                  
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre>    return inner</pre></li>
                  
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659955080', 'post139816659955080')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659955080')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659955080">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>UnsupportedMediaType(&#39;application/x-www-form-urlencoded&#39;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>get_response</td>
                    <td class="code"><pre>&lt;bound method BaseHandler._get_response of &lt;django.core.handlers.wsgi.WSGIHandler object at 0x7f29a8ce01d0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/rest/datasets&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c139816659954248">
              
                <ol start="121" class="pre-context" id="pre139816659954248">
                
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>            try:</pre></li>
                
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>            except Exception as e:</pre></li>
                
                </ol>
              
              <ol start="128" class="context-line">
                <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>                response = self.process_exception_by_middleware(e, request)</pre> <span>...</span></li>
              </ol>
              
                <ol start='129' class="post-context" id="post139816659954248">
                  
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>                view_name = callback.__name__</pre></li>
                  
                  <li onclick="toggle('pre139816659954248', 'post139816659954248')"><pre>            else:                                           # CBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659954248')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659954248">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function DatasetViewSet at 0x7f299acfb840&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7f29a1985208&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/rest/datasets&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;URLResolver &#39;metax_api.urls&#39; (None:None) &#39;^/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=metax_api.api.rest.base.views.dataset_view.DatasetViewSet, args=(), kwargs={}, url_name=type-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7f29a8ce01d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function DatasetViewSet at 0x7f299a5b2c80&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/django/core/handlers/base.py</code> in <code>_get_response</code>

          
            <div class="context" id="c139816659954504">
              
                <ol start="119" class="pre-context" id="pre139816659954504">
                
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>            response = middleware_method(request, callback, callback_args, callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>            if response:</pre></li>
                
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>                break</pre></li>
                
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>        if response is None:</pre></li>
                
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>            wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>            try:</pre></li>
                
                </ol>
              
              <ol start="126" class="context-line">
                <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>                response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre> <span>...</span></li>
              </ol>
              
                <ol start='127' class="post-context" id="post139816659954504">
                  
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>            except Exception as e:</pre></li>
                  
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>                response = self.process_exception_by_middleware(e, request)</pre></li>
                  
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>        # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>        if response is None:</pre></li>
                  
                  <li onclick="toggle('pre139816659954504', 'post139816659954504')"><pre>            if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659954504')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659954504">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function DatasetViewSet at 0x7f299acfb840&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7f29a1985208&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/rest/datasets&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;URLResolver &#39;metax_api.urls&#39; (None:None) &#39;^/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=metax_api.api.rest.base.views.dataset_view.DatasetViewSet, args=(), kwargs={}, url_name=type-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7f29a8ce01d0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function DatasetViewSet at 0x7f299a5b2c80&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/opt/rh/rh-python36/root/usr/lib64/python3.6/contextlib.py</code> in <code>inner</code>

          
            <div class="context" id="c139816659954056">
              
                <ol start="45" class="pre-context" id="pre139816659954056">
                
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre>        return self</pre></li>
                
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre>    def __call__(self, func):</pre></li>
                
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre>        @wraps(func)</pre></li>
                
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre>        def inner(*args, **kwds):</pre></li>
                
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre>            with self._recreate_cm():</pre></li>
                
                </ol>
              
              <ol start="52" class="context-line">
                <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre>                return func(*args, **kwds)</pre> <span>...</span></li>
              </ol>
              
                <ol start='53' class="post-context" id="post139816659954056">
                  
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre>        return inner</pre></li>
                  
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre>class _GeneratorContextManager(ContextDecorator, AbstractContextManager):</pre></li>
                  
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre>    &quot;&quot;&quot;Helper for @contextmanager decorator.&quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre139816659954056', 'post139816659954056')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659954056')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659954056">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;WSGIRequest: POST &#39;/rest/datasets&#39;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>func</td>
                    <td class="code"><pre>&lt;function DatasetViewSet at 0x7f299acfb840&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwds</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.transaction.Atomic object at 0x7f299a5886a0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/django/views/decorators/csrf.py</code> in <code>wrapped_view</code>

          
            <div class="context" id="c139816659954696">
              
                <ol start="47" class="pre-context" id="pre139816659954696">
                
                  <li onclick="toggle('pre139816659954696', 'post139816659954696')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659954696', 'post139816659954696')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659954696', 'post139816659954696')"><pre>def csrf_exempt(view_func):</pre></li>
                
                  <li onclick="toggle('pre139816659954696', 'post139816659954696')"><pre>    &quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659954696', 'post139816659954696')"><pre>    # view_func.csrf_exempt = True would also work, but decorators are nicer</pre></li>
                
                  <li onclick="toggle('pre139816659954696', 'post139816659954696')"><pre>    # if they don&#39;t have side effects, so return a new function.</pre></li>
                
                  <li onclick="toggle('pre139816659954696', 'post139816659954696')"><pre>    def wrapped_view(*args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="54" class="context-line">
                <li onclick="toggle('pre139816659954696', 'post139816659954696')"><pre>        return view_func(*args, **kwargs)</pre> <span>...</span></li>
              </ol>
              
                <ol start='55' class="post-context" id="post139816659954696">
                  
                  <li onclick="toggle('pre139816659954696', 'post139816659954696')"><pre>    wrapped_view.csrf_exempt = True</pre></li>
                  
                  <li onclick="toggle('pre139816659954696', 'post139816659954696')"><pre>    return wraps(view_func)(wrapped_view)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659954696')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659954696">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;WSGIRequest: POST &#39;/rest/datasets&#39;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>view_func</td>
                    <td class="code"><pre>&lt;function DatasetViewSet at 0x7f299acfb7b8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/viewsets.py</code> in <code>view</code>

          
            <div class="context" id="c139816659954952">
              
                <ol start="96" class="pre-context" id="pre139816659954952">
                
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre>                self.head = self.get</pre></li>
                
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre>            self.request = request</pre></li>
                
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre>            self.args = args</pre></li>
                
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre>            self.kwargs = kwargs</pre></li>
                
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre>            # And continue as usual</pre></li>
                
                </ol>
              
              <ol start="103" class="context-line">
                <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre>            return self.dispatch(request, *args, **kwargs)</pre> <span>...</span></li>
              </ol>
              
                <ol start='104' class="post-context" id="post139816659954952">
                  
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre>        # take name and docstring from class</pre></li>
                  
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre>        update_wrapper(view, cls, updated=())</pre></li>
                  
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre>        # and possible attributes set by decorators</pre></li>
                  
                  <li onclick="toggle('pre139816659954952', 'post139816659954952')"><pre>        # like csrf_exempt from dispatch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659954952')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659954952">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>action</td>
                    <td class="code"><pre>&#39;destroy_bulk&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>actions</td>
                    <td class="code"><pre>{&#39;delete&#39;: &#39;destroy_bulk&#39;,
 &#39;get&#39;: &#39;list&#39;,
 &#39;patch&#39;: &#39;partial_update_bulk&#39;,
 &#39;post&#39;: &#39;create&#39;,
 &#39;put&#39;: &#39;update_bulk&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;metax_api.api.rest.base.views.dataset_view.DatasetViewSet&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method CommonViewSet.destroy_bulk of &lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>initkwargs</td>
                    <td class="code"><pre>{&#39;basename&#39;: &#39;type&#39;, &#39;detail&#39;: False, &#39;suffix&#39;: &#39;List&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>method</td>
                    <td class="code"><pre>&#39;delete&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/rest/datasets&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/metax-api/src/metax_api/api/rest/base/views/dataset_view.py</code> in <code>dispatch</code>

          
            <div class="context" id="c139816659955208">
              
                <ol start="32" class="pre-context" id="pre139816659955208">
                
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>        # It is done in the serializer</pre></li>
                
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>        super(DatasetViewSet, self).__init__(*args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>    def dispatch(self, request, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>        In all responses, strip fields from dataset objects that are not meant for the general public</pre></li>
                
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>        &quot;&quot;&quot;</pre></li>
                
                </ol>
              
              <ol start="39" class="context-line">
                <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>        res = super().dispatch(request, **kwargs)</pre> <span>...</span></li>
              </ol>
              
                <ol start='40' class="post-context" id="post139816659955208">
                  
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>        if not request.user.username:</pre></li>
                  
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>            if isinstance(res.data, dict):</pre></li>
                  
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>                if &#39;results&#39; in res.data:</pre></li>
                  
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>                    # list with paging</pre></li>
                  
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>                    res.data[&#39;results&#39;] = CRS.strip_catalog_record(res.data[&#39;results&#39;])</pre></li>
                  
                  <li onclick="toggle('pre139816659955208', 'post139816659955208')"><pre>                else:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659955208')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659955208">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>__class__</td>
                    <td class="code"><pre>&lt;class &#39;metax_api.api.rest.base.views.dataset_view.DatasetViewSet&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/rest/datasets&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c139816659954568">
              
                <ol start="476" class="pre-context" id="pre139816659954568">
                
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre>            response = handler(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre>        except Exception as exc:</pre></li>
                
                </ol>
              
              <ol start="483" class="context-line">
                <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre>            response = self.handle_exception(exc)</pre> <span>...</span></li>
              </ol>
              
                <ol start='484' class="post-context" id="post139816659954568">
                  
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre>        return self.response</pre></li>
                  
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre>    def options(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre139816659954568', 'post139816659954568')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659954568')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659954568">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method DatasetViewSet.create of &lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/metax-api/src/metax_api/api/rest/base/views/common_view.py</code> in <code>handle_exception</code>

          
            <div class="context" id="c139816666109320">
              
                <ol start="51" class="pre-context" id="pre139816666109320">
                
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>    def handle_exception(self, exc):</pre></li>
                
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>        Store request and response data to disk for later inspection</pre></li>
                
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>        response = super(CommonViewSet, self).handle_exception(exc)</pre></li>
                
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>        if type(exc) not in (Http403, Http404, PermissionDenied, MethodNotAllowed):</pre></li>
                
                </ol>
              
              <ol start="58" class="context-line">
                <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>            ApiErrorService.store_error_details(self.request, response, exc)</pre> <span>...</span></li>
              </ol>
              
                <ol start='59' class="post-context" id="post139816666109320">
                  
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>        return response</pre></li>
                  
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>    def paginate_queryset(self, queryset):</pre></li>
                  
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>        if CS.get_boolean_query_param(self.request, &#39;no_pagination&#39;):</pre></li>
                  
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>            return None</pre></li>
                  
                  <li onclick="toggle('pre139816666109320', 'post139816666109320')"><pre>        return super(CommonViewSet, self).paginate_queryset(queryset)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816666109320')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816666109320">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>__class__</td>
                    <td class="code"><pre>&lt;class &#39;metax_api.api.rest.base.views.common_view.CommonViewSet&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>exc</td>
                    <td class="code"><pre>UnsupportedMediaType(&#39;application/x-www-form-urlencoded&#39;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>&lt;Response status_code=415, &quot;text/html; charset=utf-8&quot;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;metax_api.api.rest.base.views.dataset_view.DatasetViewSet object at 0x7f299a5885c0&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/metax-api/src/metax_api/services/api_error_service.py</code> in <code>store_error_details</code>

          
            <div class="context" id="c139816665955656">
              
                <ol start="64" class="pre-context" id="pre139816665955656">
                
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>        Store error and request details to disk to specified error file location.</pre></li>
                
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>        current_time = str(get_tz_aware_now_without_micros()).replace(&#39; &#39;, &#39;T&#39;)</pre></li>
                
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>        if request.method in (&#39;POST&#39;, &#39;PUT&#39;, &#39;PATCH&#39;):</pre></li>
                
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>            # cast possible datetime objects to strings, because those cant be json-serialized...</pre></li>
                
                </ol>
              
              <ol start="71" class="context-line">
                <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>            request_data = request.data</pre> <span>...</span></li>
              </ol>
              
                <ol start='72' class="post-context" id="post139816665955656">
                  
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>            for date_field in (&#39;date_modified&#39;, &#39;date_created&#39;):</pre></li>
                  
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>                if isinstance(request_data, list):</pre></li>
                  
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>                    for item in request_data:</pre></li>
                  
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>                        if date_field in item:</pre></li>
                  
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>                            item[date_field] = str(item[date_field])</pre></li>
                  
                  <li onclick="toggle('pre139816665955656', 'post139816665955656')"><pre>                elif isinstance(request_data, dict) and date_field in request_data:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816665955656')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816665955656">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>current_time</td>
                    <td class="code"><pre>&#39;2018-06-07T13:46:42+00:00&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>exception</td>
                    <td class="code"><pre>UnsupportedMediaType(&#39;application/x-www-form-urlencoded&#39;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>other</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>&lt;Response status_code=415, &quot;text/html; charset=utf-8&quot;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py</code> in <code>data</code>

          
            <div class="context" id="c139816659566024">
              
                <ol start="204" class="pre-context" id="pre139816659566024">
                
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>        More semantically correct name for request.GET.</pre></li>
                
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>        return self._request.GET</pre></li>
                
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>    @property</pre></li>
                
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>    def data(self):</pre></li>
                
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>        if not _hasattr(self, &#39;_full_data&#39;):</pre></li>
                
                </ol>
              
              <ol start="211" class="context-line">
                <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>            self._load_data_and_files()</pre> <span>...</span></li>
              </ol>
              
                <ol start='212' class="post-context" id="post139816659566024">
                  
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>        return self._full_data</pre></li>
                  
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>    @property</pre></li>
                  
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>    def user(self):</pre></li>
                  
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre139816659566024', 'post139816659566024')"><pre>        Returns the user associated with the current request, as authenticated</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659566024')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659566024">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py</code> in <code>_load_data_and_files</code>

          
            <div class="context" id="c139816659566216">
              
                <ol start="267" class="pre-context" id="pre139816659566216">
                
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>        return self._authenticator</pre></li>
                
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>    def _load_data_and_files(self):</pre></li>
                
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>        Parses the request content into `self.data`.</pre></li>
                
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>        if not _hasattr(self, &#39;_data&#39;):</pre></li>
                
                </ol>
              
              <ol start="274" class="context-line">
                <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>            self._data, self._files = self._parse()</pre> <span>...</span></li>
              </ol>
              
                <ol start='275' class="post-context" id="post139816659566216">
                  
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>            if self._files:</pre></li>
                  
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>                self._full_data = self._data.copy()</pre></li>
                  
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>                self._full_data.update(self._files)</pre></li>
                  
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>            else:</pre></li>
                  
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre>                self._full_data = self._data</pre></li>
                  
                  <li onclick="toggle('pre139816659566216', 'post139816659566216')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659566216')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659566216">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py</code> in <code>_parse</code>

          
            <div class="context" id="c139816659566280">
              
                <ol start="339" class="pre-context" id="pre139816659566280">
                
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>                empty_data = {}</pre></li>
                
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>            empty_files = MultiValueDict()</pre></li>
                
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>            return (empty_data, empty_files)</pre></li>
                
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>        parser = self.negotiator.select_parser(self, self.parsers)</pre></li>
                
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre></pre></li>
                
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>        if not parser:</pre></li>
                
                </ol>
              
              <ol start="346" class="context-line">
                <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>            raise exceptions.UnsupportedMediaType(media_type)</pre> <span>...</span></li>
              </ol>
              
                <ol start='347' class="post-context" id="post139816659566280">
                  
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>        try:</pre></li>
                  
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>            parsed = parser.parse(stream, media_type, self.parser_context)</pre></li>
                  
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>        except Exception:</pre></li>
                  
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>            # If we get an exception during parsing, fill in empty data and</pre></li>
                  
                  <li onclick="toggle('pre139816659566280', 'post139816659566280')"><pre>            # re-raise.  Ensures we don&#39;t simply repeat the error when</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139816659566280')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139816659566280">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>media_type</td>
                    <td class="code"><pre>&#39;application/x-www-form-urlencoded&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>parser</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f299a5887b8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>stream</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/rest/datasets&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
    </ul>
  </div>
  <form action="http://dpaste.com/" name="pasteform" id="pasteform" method="post">

  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="UnsupportedMediaType at /rest/datasets">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: POST
Request URL: https://metax-test.csc.fi/rest/datasets

Django Version: 2.0
Python Version: 3.6.3
Installed Applications:
[&#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;rest_framework&#39;,
 &#39;metax_api&#39;,
 &#39;django.contrib.staticfiles&#39;]
Installed Middleware:
[&#39;django.middleware.security.SecurityMiddleware&#39;,
 &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;metax_api.middleware.IdentifyApiCaller&#39;,
 &#39;metax_api.middleware.AddLastModifiedHeaderToResponse&#39;,
 &#39;metax_api.middleware.StreamHttpResponse&#39;]



Traceback:

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/views.py" in dispatch
  480.             response = handler(request, *args, **kwargs)

File "/usr/local/metax/metax-api/src/metax_api/api/rest/base/views/dataset_view.py" in create
  148.         res = super(DatasetViewSet, self).create(request, *args, **kwargs)

File "/usr/local/metax/metax-api/src/metax_api/api/rest/base/views/common_view.py" in create
  188.         results, http_status = self.create_bulk_method(request, serializer_class, **kwargs)

File "/usr/local/metax/metax-api/src/metax_api/services/common_service.py" in create_bulk
  62.         if isinstance(request.data, list):

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py" in data
  211.             self._load_data_and_files()

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py" in _load_data_and_files
  274.             self._data, self._files = self._parse()

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py" in _parse
  346.             raise exceptions.UnsupportedMediaType(media_type)

During handling of the above exception (Unsupported media type &quot;application/x-www-form-urlencoded&quot; in request.), another exception occurred:

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/django/core/handlers/exception.py" in inner
  35.             response = get_response(request)

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/django/core/handlers/base.py" in _get_response
  128.                 response = self.process_exception_by_middleware(e, request)

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/django/core/handlers/base.py" in _get_response
  126.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)

File "/opt/rh/rh-python36/root/usr/lib64/python3.6/contextlib.py" in inner
  52.                 return func(*args, **kwds)

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/django/views/decorators/csrf.py" in wrapped_view
  54.         return view_func(*args, **kwargs)

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/viewsets.py" in view
  103.             return self.dispatch(request, *args, **kwargs)

File "/usr/local/metax/metax-api/src/metax_api/api/rest/base/views/dataset_view.py" in dispatch
  39.         res = super().dispatch(request, **kwargs)

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/views.py" in dispatch
  483.             response = self.handle_exception(exc)

File "/usr/local/metax/metax-api/src/metax_api/api/rest/base/views/common_view.py" in handle_exception
  58.             ApiErrorService.store_error_details(self.request, response, exc)

File "/usr/local/metax/metax-api/src/metax_api/services/api_error_service.py" in store_error_details
  71.             request_data = request.data

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py" in data
  211.             self._load_data_and_files()

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py" in _load_data_and_files
  274.             self._data, self._files = self._parse()

File "/usr/local/metax/pyenv/lib64/python3.6/site-packages/rest_framework/request.py" in _parse
  346.             raise exceptions.UnsupportedMediaType(media_type)

Exception Type: UnsupportedMediaType at /rest/datasets
Exception Value: Unsupported media type &quot;application/x-www-form-urlencoded&quot; in request.
</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public website">
  </div>
</form>
</div>



<div id="requestinfo">
  <h2>Request information</h2>


  
    <h3 id="user-info">USER</h3>
    <p>AnonymousUser</p>
  

  <h3 id="get-info">GET</h3>
  
    <p>No GET data</p>
  

  <h3 id="post-info">POST</h3>
  
    <table class="req">
      <thead>
        <tr>
          <th>Variable</th>
          <th>Value</th>
        </tr>
      </thead>
      <tbody>
        
          <tr>
            <td>{	&quot;data_catalog&quot;: &quot;urn:nbn:fi:att:data-catalog-ida&quot;,	&quot;editor&quot;: {		&quot;identifier&quot;: &quot;qvain&quot;,		&quot;record_id&quot;: &quot;056dcd9b333b524bc78ce22aba24f4b4&quot;	},	&quot;metadata_provider_org&quot;: &quot;trump corporation&quot;,	&quot;metadata_provider_user&quot;: &quot;056dcd9b333b39ad41177ba14d6f0242&quot;,	&quot;research_dataset&quot;: {		&quot;title&quot;: {			&quot;en&quot;: &quot;crappy dataset&quot;		},		&quot;description&quot;:[			{				&quot;en&quot;: &quot;This dataset is pure crap.&quot;			}		],		&quot;creator&quot;: [			{				&quot;@type&quot;: &quot;Person&quot;,				&quot;name&quot;: &quot;The Donald&quot;,				&quot;member_of&quot;: {					&quot;@type&quot;: &quot;Organization&quot;,					&quot;name&quot;: {						&quot;en&quot;: &quot;Trump Organisation&quot;					}				}			}		]	}}</td>
            <td class="code"><pre>&#39;&#39;</pre></td>
          </tr>
        
      </tbody>
    </table>
  
  <h3 id="files-info">FILES</h3>
  
    <p>No FILES data</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data</p>
  

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>CONTENT_LENGTH</td>
          <td class="code"><pre>&#39;557&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_TYPE</td>
          <td class="code"><pre>&#39;application/x-www-form-urlencoded&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT</td>
          <td class="code"><pre>&#39;*/*&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_AUTHORIZATION</td>
          <td class="code"><pre>&#39;Basic cXZhaW46ZkE1RHJWdGpMM2hIbmV4dQ==&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CONNECTION</td>
          <td class="code"><pre>&#39;close&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_HOST</td>
          <td class="code"><pre>&#39;localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_USER_AGENT</td>
          <td class="code"><pre>&#39;curl/7.60.0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_FORWARDED_HOST</td>
          <td class="code"><pre>&#39;metax-test.csc.fi&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_FORWARDED_PROTO</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_REAL_IP</td>
          <td class="code"><pre>&#39;193.167.168.219&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PATH_INFO</td>
          <td class="code"><pre>&#39;/rest/datasets&#39;</pre></td>
        </tr>
      
        <tr>
          <td>QUERY_STRING</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>RAW_URI</td>
          <td class="code"><pre>&#39;/rest/datasets&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_ADDR</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_METHOD</td>
          <td class="code"><pre>&#39;POST&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SCRIPT_NAME</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_NAME</td>
          <td class="code"><pre>&#39;localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PORT</td>
          <td class="code"><pre>&#39;443&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PROTOCOL</td>
          <td class="code"><pre>&#39;HTTP/1.0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SOFTWARE</td>
          <td class="code"><pre>&#39;gunicorn/19.8.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>gunicorn.socket</td>
          <td class="code"><pre>&lt;gevent._socket3.socket object, fd=16, family=1, type=2049, proto=0&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.errors</td>
          <td class="code"><pre>&lt;gunicorn.http.wsgi.WSGIErrorsWrapper object at 0x7f299a588978&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.file_wrapper</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.input</td>
          <td class="code"><pre>&lt;gunicorn.http.body.Body object at 0x7f299a588c50&gt;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multiprocess</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multithread</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.run_once</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.url_scheme</td>
          <td class="code"><pre>&#39;https&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.version</td>
          <td class="code"><pre>(1, 0)</pre></td>
        </tr>
      
    </tbody>
  </table>


  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>metax_api.settings</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>ABSOLUTE_URL_OVERRIDES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>ADMINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_HOSTS</td>
          <td class="code"><pre>[&#39;localhost&#39;, &#39;127.0.0.1&#39;, &#39;[::1]&#39;, &#39;metax-test.csc.fi&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>API_ACCESS</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>APPEND_SLASH</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>AUTHENTICATION_BACKENDS</td>
          <td class="code"><pre>[&#39;django.contrib.auth.backends.ModelBackend&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_PASSWORD_VALIDATORS</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_USER_MODEL</td>
          <td class="code"><pre>&#39;metax_api.MetaxUser&#39;</pre></td>
        </tr>
      
        <tr>
          <td>BASE_DIR</td>
          <td class="code"><pre>&#39;/usr/local/metax/metax-api/src&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHES</td>
          <td class="code"><pre>{&#39;default&#39;: {&#39;BACKEND&#39;: &#39;django.core.cache.backends.locmem.LocMemCache&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_ALIAS</td>
          <td class="code"><pre>&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_SECONDS</td>
          <td class="code"><pre>600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_AGE</td>
          <td class="code"><pre>31449600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_NAME</td>
          <td class="code"><pre>&#39;csrftoken&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_PATH</td>
          <td class="code"><pre>&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SECURE</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_FAILURE_VIEW</td>
          <td class="code"><pre>&#39;django.views.csrf.csrf_failure&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_HEADER_NAME</td>
          <td class="code"><pre>&#39;HTTP_X_CSRFTOKEN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_TRUSTED_ORIGINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_USE_SESSIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DATABASES</td>
          <td class="code"><pre>{&#39;default&#39;: {&#39;ATOMIC_REQUESTS&#39;: True,
             &#39;AUTOCOMMIT&#39;: True,
             &#39;CONN_MAX_AGE&#39;: 0,
             &#39;ENGINE&#39;: &#39;django.db.backends.postgresql_psycopg2&#39;,
             &#39;HOST&#39;: &#39;192.168.1.12&#39;,
             &#39;NAME&#39;: &#39;metax_db_test&#39;,
             &#39;OPTIONS&#39;: {},
             &#39;PASSWORD&#39;: &#39;********************&#39;,
             &#39;PORT&#39;: &#39;&#39;,
             &#39;TEST&#39;: {&#39;CHARSET&#39;: None,
                      &#39;COLLATION&#39;: None,
                      &#39;MIRROR&#39;: None,
                      &#39;NAME&#39;: None},
             &#39;TIME_ZONE&#39;: None,
             &#39;USER&#39;: &#39;metax_db_user_test&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>DATABASE_ROUTERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>DATA_UPLOAD_MAX_NUMBER_FIELDS</td>
          <td class="code"><pre>1000</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_FORMAT</td>
          <td class="code"><pre>&#39;N j, Y, P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_INPUT_FORMATS</td>
          <td class="code"><pre>[&#39;%Y-%m-%dT%H:%M:%S.%fZ&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DATE_FORMAT</td>
          <td class="code"><pre>&#39;N j, Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATE_INPUT_FORMATS</td>
          <td class="code"><pre>[&#39;%Y-%m-%d&#39;,
 &#39;%m/%d/%Y&#39;,
 &#39;%m/%d/%y&#39;,
 &#39;%b %d %Y&#39;,
 &#39;%b %d, %Y&#39;,
 &#39;%d %b %Y&#39;,
 &#39;%d %b, %Y&#39;,
 &#39;%B %d %Y&#39;,
 &#39;%B %d, %Y&#39;,
 &#39;%d %B %Y&#39;,
 &#39;%d %B, %Y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>DECIMAL_SEPARATOR</td>
          <td class="code"><pre>&#39;.&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CHARSET</td>
          <td class="code"><pre>&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CONTENT_TYPE</td>
          <td class="code"><pre>&#39;text/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
          <td class="code"><pre>&#39;django.views.debug.SafeExceptionReporterFilter&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FILE_STORAGE</td>
          <td class="code"><pre>&#39;django.core.files.storage.FileSystemStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FROM_EMAIL</td>
          <td class="code"><pre>&#39;webmaster@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_INDEX_TABLESPACE</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_TABLESPACE</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DISALLOWED_USER_AGENTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>ELASTICSEARCH</td>
          <td class="code"><pre>{&#39;ALWAYS_RELOAD_REFERENCE_DATA_ON_RESTART&#39;: True, &#39;HOSTS&#39;: [&#39;192.168.1.8&#39;]}</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_BACKEND</td>
          <td class="code"><pre>&#39;django.core.mail.backends.smtp.EmailBackend&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST</td>
          <td class="code"><pre>&#39;localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_PASSWORD</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_USER</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_PORT</td>
          <td class="code"><pre>25</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_CERTFILE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_KEYFILE</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SUBJECT_PREFIX</td>
          <td class="code"><pre>&#39;[Django] &#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_TIMEOUT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_LOCALTIME</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_SSL</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_TLS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>ERROR_FILES_PATH</td>
          <td class="code"><pre>&#39;/var/log/metax-api/errors&#39;</pre></td>
        </tr>
      
        <tr>
          <td>FILE_CHARSET</td>
          <td class="code"><pre>&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_HANDLERS</td>
          <td class="code"><pre>[&#39;django.core.files.uploadhandler.MemoryFileUploadHandler&#39;,
 &#39;django.core.files.uploadhandler.TemporaryFileUploadHandler&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_TEMP_DIR</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FIRST_DAY_OF_WEEK</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>FIXTURE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>FORCE_SCRIPT_NAME</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORMAT_MODULE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FORM_RENDERER</td>
          <td class="code"><pre>&#39;django.forms.renderers.DjangoTemplates&#39;</pre></td>
        </tr>
      
        <tr>
          <td>IGNORABLE_404_URLS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>INSTALLED_APPS</td>
          <td class="code"><pre>[&#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;rest_framework&#39;,
 &#39;metax_api&#39;,
 &#39;django.contrib.staticfiles&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>INTERNAL_IPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES</td>
          <td class="code"><pre>[(&#39;af&#39;, &#39;Afrikaans&#39;),
 (&#39;ar&#39;, &#39;Arabic&#39;),
 (&#39;ast&#39;, &#39;Asturian&#39;),
 (&#39;az&#39;, &#39;Azerbaijani&#39;),
 (&#39;bg&#39;, &#39;Bulgarian&#39;),
 (&#39;be&#39;, &#39;Belarusian&#39;),
 (&#39;bn&#39;, &#39;Bengali&#39;),
 (&#39;br&#39;, &#39;Breton&#39;),
 (&#39;bs&#39;, &#39;Bosnian&#39;),
 (&#39;ca&#39;, &#39;Catalan&#39;),
 (&#39;cs&#39;, &#39;Czech&#39;),
 (&#39;cy&#39;, &#39;Welsh&#39;),
 (&#39;da&#39;, &#39;Danish&#39;),
 (&#39;de&#39;, &#39;German&#39;),
 (&#39;dsb&#39;, &#39;Lower Sorbian&#39;),
 (&#39;el&#39;, &#39;Greek&#39;),
 (&#39;en&#39;, &#39;English&#39;),
 (&#39;en-au&#39;, &#39;Australian English&#39;),
 (&#39;en-gb&#39;, &#39;British English&#39;),
 (&#39;eo&#39;, &#39;Esperanto&#39;),
 (&#39;es&#39;, &#39;Spanish&#39;),
 (&#39;es-ar&#39;, &#39;Argentinian Spanish&#39;),
 (&#39;es-co&#39;, &#39;Colombian Spanish&#39;),
 (&#39;es-mx&#39;, &#39;Mexican Spanish&#39;),
 (&#39;es-ni&#39;, &#39;Nicaraguan Spanish&#39;),
 (&#39;es-ve&#39;, &#39;Venezuelan Spanish&#39;),
 (&#39;et&#39;, &#39;Estonian&#39;),
 (&#39;eu&#39;, &#39;Basque&#39;),
 (&#39;fa&#39;, &#39;Persian&#39;),
 (&#39;fi&#39;, &#39;Finnish&#39;),
 (&#39;fr&#39;, &#39;French&#39;),
 (&#39;fy&#39;, &#39;Frisian&#39;),
 (&#39;ga&#39;, &#39;Irish&#39;),
 (&#39;gd&#39;, &#39;Scottish Gaelic&#39;),
 (&#39;gl&#39;, &#39;Galician&#39;),
 (&#39;he&#39;, &#39;Hebrew&#39;),
 (&#39;hi&#39;, &#39;Hindi&#39;),
 (&#39;hr&#39;, &#39;Croatian&#39;),
 (&#39;hsb&#39;, &#39;Upper Sorbian&#39;),
 (&#39;hu&#39;, &#39;Hungarian&#39;),
 (&#39;ia&#39;, &#39;Interlingua&#39;),
 (&#39;id&#39;, &#39;Indonesian&#39;),
 (&#39;io&#39;, &#39;Ido&#39;),
 (&#39;is&#39;, &#39;Icelandic&#39;),
 (&#39;it&#39;, &#39;Italian&#39;),
 (&#39;ja&#39;, &#39;Japanese&#39;),
 (&#39;ka&#39;, &#39;Georgian&#39;),
 (&#39;kab&#39;, &#39;Kabyle&#39;),
 (&#39;kk&#39;, &#39;Kazakh&#39;),
 (&#39;km&#39;, &#39;Khmer&#39;),
 (&#39;kn&#39;, &#39;Kannada&#39;),
 (&#39;ko&#39;, &#39;Korean&#39;),
 (&#39;lb&#39;, &#39;Luxembourgish&#39;),
 (&#39;lt&#39;, &#39;Lithuanian&#39;),
 (&#39;lv&#39;, &#39;Latvian&#39;),
 (&#39;mk&#39;, &#39;Macedonian&#39;),
 (&#39;ml&#39;, &#39;Malayalam&#39;),
 (&#39;mn&#39;, &#39;Mongolian&#39;),
 (&#39;mr&#39;, &#39;Marathi&#39;),
 (&#39;my&#39;, &#39;Burmese&#39;),
 (&#39;nb&#39;, &#39;Norwegian Bokmål&#39;),
 (&#39;ne&#39;, &#39;Nepali&#39;),
 (&#39;nl&#39;, &#39;Dutch&#39;),
 (&#39;nn&#39;, &#39;Norwegian Nynorsk&#39;),
 (&#39;os&#39;, &#39;Ossetic&#39;),
 (&#39;pa&#39;, &#39;Punjabi&#39;),
 (&#39;pl&#39;, &#39;Polish&#39;),
 (&#39;pt&#39;, &#39;Portuguese&#39;),
 (&#39;pt-br&#39;, &#39;Brazilian Portuguese&#39;),
 (&#39;ro&#39;, &#39;Romanian&#39;),
 (&#39;ru&#39;, &#39;Russian&#39;),
 (&#39;sk&#39;, &#39;Slovak&#39;),
 (&#39;sl&#39;, &#39;Slovenian&#39;),
 (&#39;sq&#39;, &#39;Albanian&#39;),
 (&#39;sr&#39;, &#39;Serbian&#39;),
 (&#39;sr-latn&#39;, &#39;Serbian Latin&#39;),
 (&#39;sv&#39;, &#39;Swedish&#39;),
 (&#39;sw&#39;, &#39;Swahili&#39;),
 (&#39;ta&#39;, &#39;Tamil&#39;),
 (&#39;te&#39;, &#39;Telugu&#39;),
 (&#39;th&#39;, &#39;Thai&#39;),
 (&#39;tr&#39;, &#39;Turkish&#39;),
 (&#39;tt&#39;, &#39;Tatar&#39;),
 (&#39;udm&#39;, &#39;Udmurt&#39;),
 (&#39;uk&#39;, &#39;Ukrainian&#39;),
 (&#39;ur&#39;, &#39;Urdu&#39;),
 (&#39;vi&#39;, &#39;Vietnamese&#39;),
 (&#39;zh-hans&#39;, &#39;Simplified Chinese&#39;),
 (&#39;zh-hant&#39;, &#39;Traditional Chinese&#39;)]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES_BIDI</td>
          <td class="code"><pre>[&#39;he&#39;, &#39;ar&#39;, &#39;fa&#39;, &#39;ur&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_CODE</td>
          <td class="code"><pre>&#39;en-US&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_AGE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_NAME</td>
          <td class="code"><pre>&#39;django_language&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_PATH</td>
          <td class="code"><pre>&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOCALE_PATHS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING</td>
          <td class="code"><pre>{&#39;disable_existing_loggers&#39;: False,
 &#39;filters&#39;: {&#39;require_debug_false&#39;: {&#39;()&#39;: &#39;django.utils.log.RequireDebugFalse&#39;},
             &#39;require_debug_true&#39;: {&#39;()&#39;: &#39;django.utils.log.RequireDebugTrue&#39;}},
 &#39;formatters&#39;: {&#39;standard&#39;: {&#39;format&#39;: &#39;%(asctime)s p%(process)d %(name)s &#39;
                                       &#39;%(levelname)s: %(message)s&#39;}},
 &#39;handlers&#39;: {&#39;console&#39;: {&#39;class&#39;: &#39;logging.StreamHandler&#39;,
                          &#39;filters&#39;: [&#39;require_debug_true&#39;],
                          &#39;formatter&#39;: &#39;standard&#39;,
                          &#39;level&#39;: &#39;DEBUG&#39;},
              &#39;debug&#39;: {&#39;class&#39;: &#39;logging.FileHandler&#39;,
                        &#39;filename&#39;: &#39;/var/log/metax-api/metax_api.log&#39;,
                        &#39;filters&#39;: [&#39;require_debug_true&#39;],
                        &#39;formatter&#39;: &#39;standard&#39;,
                        &#39;level&#39;: &#39;DEBUG&#39;},
              &#39;general&#39;: {&#39;class&#39;: &#39;logging.FileHandler&#39;,
                          &#39;filename&#39;: &#39;/var/log/metax-api/metax_api.log&#39;,
                          &#39;filters&#39;: [&#39;require_debug_false&#39;],
                          &#39;formatter&#39;: &#39;standard&#39;,
                          &#39;level&#39;: &#39;INFO&#39;}},
 &#39;loggers&#39;: {&#39;django&#39;: {&#39;handlers&#39;: [&#39;general&#39;, &#39;console&#39;, &#39;debug&#39;]},
             &#39;metax_api&#39;: &#39;********************&#39;},
 &#39;version&#39;: 1}</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING_CONFIG</td>
          <td class="code"><pre>&#39;logging.config.dictConfig&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_REDIRECT_URL</td>
          <td class="code"><pre>&#39;/accounts/profile/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_URL</td>
          <td class="code"><pre>&#39;/accounts/login/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGOUT_REDIRECT_URL</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>MANAGERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_ROOT</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_URL</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MESSAGE_STORAGE</td>
          <td class="code"><pre>&#39;django.contrib.messages.storage.fallback.FallbackStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE</td>
          <td class="code"><pre>[&#39;django.middleware.security.SecurityMiddleware&#39;,
 &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;metax_api.middleware.IdentifyApiCaller&#39;,
 &#39;metax_api.middleware.AddLastModifiedHeaderToResponse&#39;,
 &#39;metax_api.middleware.StreamHttpResponse&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>MIGRATION_MODULES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>MONTH_DAY_FORMAT</td>
          <td class="code"><pre>&#39;F j&#39;</pre></td>
        </tr>
      
        <tr>
          <td>NUMBER_GROUPING</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>OAI</td>
          <td class="code"><pre>{&#39;ADMIN_EMAIL&#39;: &#39;servicedesk@csc.fi&#39;,
 &#39;BASE_URL&#39;: &#39;http://metax-test.csc.fi/oai&#39;,
 &#39;BATCH_SIZE&#39;: 25,
 &#39;ETSIN_URL_TEMPLATE&#39;: &#39;http://etsin-test.fairdata.fi/dataset/%s&#39;,
 &#39;REPOSITORY_NAME&#39;: &#39;Metax (test)&#39;,
 &#39;SET_MAPPINGS&#39;: {&#39;att_datasets&#39;: [&#39;urn:nbn:fi:att:data-catalog-att&#39;],
                  &#39;datasets&#39;: [&#39;urn:nbn:fi:att:data-catalog-att&#39;,
                               &#39;urn:nbn:fi:att:data-catalog-ida&#39;],
                  &#39;ida_datasets&#39;: [&#39;urn:nbn:fi:att:data-catalog-ida&#39;]}}</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_HASHERS</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT_DAYS</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>PREPEND_WWW</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>PROJECT_DIR</td>
          <td class="code"><pre>&#39;/usr/local/metax/metax-api/src/metax_api&#39;</pre></td>
        </tr>
      
        <tr>
          <td>RABBITMQ</td>
          <td class="code"><pre>{&#39;EXCHANGES&#39;: [{&#39;DURABLE&#39;: True, &#39;NAME&#39;: &#39;datasets&#39;, &#39;TYPE&#39;: &#39;direct&#39;}],
 &#39;HOSTS&#39;: &#39;192.168.1.8&#39;,
 &#39;PASSWORD&#39;: &#39;********************&#39;,
 &#39;PORT&#39;: 5672,
 &#39;USER&#39;: &#39;metax-user&#39;,
 &#39;VHOST&#39;: &#39;metax&#39;}</pre></td>
        </tr>
      
        <tr>
          <td>RAINBOWTESTS_HIGHLIGHT_PATH</td>
          <td class="code"><pre>&#39;/usr/local/metax/metax-api/src&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REDIS_SENTINEL</td>
          <td class="code"><pre>{&#39;DEBUG&#39;: False,
 &#39;HOSTS&#39;: [[&#39;127.0.0.1&#39;, 5000], [&#39;127.0.0.1&#39;, 5001], [&#39;127.0.0.1&#39;, 5002]],
 &#39;LOCALHOST_PORT&#39;: 6379,
 &#39;PASSWORD&#39;: &#39;********************&#39;,
 &#39;SERVICE&#39;: &#39;metax-master&#39;,
 &#39;SOCKET_TIMEOUT&#39;: 0.1,
 &#39;TEST_DB&#39;: 15}</pre></td>
        </tr>
      
        <tr>
          <td>REST_FRAMEWORK</td>
          <td class="code"><pre>{&#39;DEFAULT_PAGINATION_CLASS&#39;: &#39;rest_framework.pagination.LimitOffsetPagination&#39;,
 &#39;DEFAULT_PARSER_CLASSES&#39;: [&#39;rest_framework.parsers.JSONParser&#39;,
                            &#39;metax_api.parsers.XMLParser&#39;],
 &#39;DEFAULT_PERMISSION_CLASSES&#39;: [&#39;rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly&#39;],
 &#39;DEFAULT_RENDERER_CLASSES&#39;: [&#39;rest_framework.renderers.JSONRenderer&#39;,
                              &#39;rest_framework.renderers.BrowsableAPIRenderer&#39;,
                              &#39;metax_api.renderers.XMLRenderer&#39;],
 &#39;PAGE_SIZE&#39;: 10}</pre></td>
        </tr>
      
        <tr>
          <td>ROOT_URLCONF</td>
          <td class="code"><pre>&#39;metax_api.urls&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_BROWSER_XSS_FILTER</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_PRELOAD</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_SECONDS</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_PROXY_SSL_HEADER</td>
          <td class="code"><pre>(&#39;HTTP_X_FORWARDED_PROTO&#39;, &#39;https&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REDIRECT_EXEMPT</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_HOST</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_REDIRECT</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_EMAIL</td>
          <td class="code"><pre>&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_CACHE_ALIAS</td>
          <td class="code"><pre>&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_AGE</td>
          <td class="code"><pre>1209600</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_HTTPONLY</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_NAME</td>
          <td class="code"><pre>&#39;sessionid&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_PATH</td>
          <td class="code"><pre>&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SECURE</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_ENGINE</td>
          <td class="code"><pre>&#39;django.contrib.sessions.backends.db&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_FILE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SAVE_EVERY_REQUEST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SERIALIZER</td>
          <td class="code"><pre>&#39;django.contrib.sessions.serializers.JSONSerializer&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SETTINGS_MODULE</td>
          <td class="code"><pre>&#39;metax_api.settings&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATETIME_FORMAT</td>
          <td class="code"><pre>&#39;m/d/Y P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATE_FORMAT</td>
          <td class="code"><pre>&#39;m/d/Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SIGNING_BACKEND</td>
          <td class="code"><pre>&#39;django.core.signing.TimestampSigner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SILENCED_SYSTEM_CHECKS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_FINDERS</td>
          <td class="code"><pre>[&#39;django.contrib.staticfiles.finders.FileSystemFinder&#39;,
 &#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_STORAGE</td>
          <td class="code"><pre>&#39;django.contrib.staticfiles.storage.StaticFilesStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_ROOT</td>
          <td class="code"><pre>&#39;/usr/local/metax/metax-api/src/static&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_URL</td>
          <td class="code"><pre>&#39;/static/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATES</td>
          <td class="code"><pre>[{&#39;APP_DIRS&#39;: True,
  &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
  &#39;DIRS&#39;: [],
  &#39;OPTIONS&#39;: {&#39;context_processors&#39;: [&#39;django.template.context_processors.debug&#39;,
                                     &#39;django.template.context_processors.request&#39;,
                                     &#39;django.contrib.auth.context_processors.auth&#39;,
                                     &#39;django.contrib.messages.context_processors.messages&#39;]}}]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_NON_SERIALIZED_APPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_RUNNER</td>
          <td class="code"><pre>&#39;rainbowtests.test.runner.RainbowDiscoverRunner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>THOUSAND_SEPARATOR</td>
          <td class="code"><pre>&#39;,&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_FORMAT</td>
          <td class="code"><pre>&#39;P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TIME_INPUT_FORMATS</td>
          <td class="code"><pre>[&#39;%H:%M:%S&#39;, &#39;%H:%M:%S.%f&#39;, &#39;%H:%M&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_ZONE</td>
          <td class="code"><pre>&#39;Europe/Helsinki&#39;</pre></td>
        </tr>
      
        <tr>
          <td>USE_ETAGS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_I18N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_L10N</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_THOUSAND_SEPARATOR</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_TZ</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_HOST</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_PORT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>WSGI_APPLICATION</td>
          <td class="code"><pre>&#39;metax_api.wsgi.application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>X_FRAME_OPTIONS</td>
          <td class="code"><pre>&#39;DENY&#39;</pre></td>
        </tr>
      
        <tr>
          <td>YEAR_MONTH_FORMAT</td>
          <td class="code"><pre>&#39;F Y&#39;</pre></td>
        </tr>
      
    </tbody>
  </table>

</div>

  <div id="explanation">
    <p>
      You're seeing this error because you have <code>DEBUG = True</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>

</body>
</html>
